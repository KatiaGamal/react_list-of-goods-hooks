{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","isReversed","setIsReversed","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGHT","length","reverse","getPreparedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,qBAAAA,I,uBAAAA,I,oBAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA1BR,SAA0BA,EAA1B,GAAgF,IAAnCJ,EAAkC,EAAlCA,UAAWE,EAAuB,EAAvBA,WAChDG,EAAa,YAAOD,GAmB1B,OAjBIJ,IAAcL,EAASI,SACzBM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKL,EAASc,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXV,GACFG,EAAcQ,UAGTR,EAMOS,CAAiBlB,EAAiB,CAAEI,YAAWE,eAE7D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAaN,EAASc,WACrCM,UAAWG,IAAG,SAAU,UACtB,CAAE,WAAYlB,IAAcL,EAASc,WAJzC,iCASA,wBACEO,KAAK,SACLC,QAAS,kBAAMhB,EAAaN,EAASgB,SACrCI,UAAWG,IAAG,SAAU,UACtB,CAAE,WAAYlB,IAAcL,EAASgB,SAJzC,4BASA,wBACEK,KAAK,SACLC,QAAS,kBAAMd,GAAeD,IAC9Ba,UAAWG,IACT,oBACA,CAAE,YAAahB,IALnB,sBAWEA,GAAcF,IAAcL,EAASI,UACrC,wBACEkB,QAAS,WACPhB,EAAaN,EAASI,SACtBI,GAAc,IAEhBa,KAAK,SACLD,UAAU,4BANZ,sBAaJ,6BACE,6BACGX,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cCvGrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0cc2e056.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  DEFAULT,\n  ALPHABET,\n  LENGHT,\n}\n\ninterface Reorder {\n  sortField: SortType;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(goods: string[], { sortField, isReversed }: Reorder) {\n  const preparedGoods = [...goods];\n\n  if (sortField !== SortType.DEFAULT) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n        case SortType.LENGHT:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n  const goods = getPreparedGoods(goodsFromServer, { sortField, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.ALPHABET)}\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SortType.ALPHABET })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.LENGHT)}\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SortType.LENGHT })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(!isReversed)}\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortField !== SortType.DEFAULT) && (\n          <button\n            onClick={() => {\n              setSortField(SortType.DEFAULT);\n              setIsReversed(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}